{"version":3,"sources":["action-types/index.js","Actions/index.js","utility.js","ItemSubmissionForm.js","ListItem.js","constants.js","ListWide.js","ListMobile.js","Pagination.js","App.js","serviceWorker.js","Reducers/reducer.js","index.js"],"names":["actionTypes","submitNewTodo","newTodo","type","payload","deleteItem","id","changePageNumber","deleteExpiredTodos","deleteCompletedTodos","setAutoDeleteCompleted","setShowCompleted","getCurDate","fullDate","Date","setTime","getTime","getTimezoneOffset","toISOString","formattedDate","truncateISO","isoString","i","length","substring","getMaxDate","yearFromNow","parseInt","ItemSubmissionForm","mobile","useState","todoText","setTodoText","expires","setExpires","expiryDate","setExpiryDate","important","setImportant","todoId","useSelector","state","handleImportantToggle","e","dispatch","useDispatch","className","onSubmit","preventDefault","now","dateAdded","completed","text","handleSubmission","value","onChange","event","target","placeholder","htmlFor","name","checked","min","max","disabled","onClick","ListItem","todoItem","expiryPickerActive","setExpiryPickerActive","selectedExpiryDate","setSelectedExpiryDate","editTodoTextActive","setEditTodoTextActive","newTodoText","setNewTodoText","autoDeleteCompleted","handleExpirySubmission","formatDate","rows","isExpired","toggleImportant","toggleComplete","removeExpiry","rawDate","split","date","time","year","month","day","dateInUnixTime","parse","ITEMS_PER_PAGE_INCREMENTS","PAGE_CHANGE_DIRECTIONS","SORT_CRITERIA","DEMO_ITEMS","getFullYear","INITIAL_STATE","itemsPerPage","pageIndex","todos","showCompleted","ListWide","sortCriterion","setSortCriterion","showCompletedTodos","visibleListItems","getVisibleListItems","startIndex","endIndex","numItems","map","item","key","Math","random","list","sortedList","applySortCriterion","filter","slice","sort","a","b","aDateAdded","bDateAdded","aDateAddedUnixTime","bDateAddedUnixTime","aIsImportant","bIsImportant","aExpiry","bExpiry","ListMobile","optionsActive","setOptionsActive","Pagination","pageNumber","handleItemsPerPageChange","noItems","updateItemsPerPage","handlePageNumberInput","keyCode","which","blur","handlePageArrowClick","direction","isPrevDisabled","todosCopy","numTodos","prevDisabled","nextDisabled","pattern","onFocus","onKeyPress","onBlur","App","window","innerWidth","viewportWidth","setViewportWidth","useEffect","addEventListener","Boolean","location","hostname","match","getTodoIndexById","validatePageNumber","candidatePageNum","maxPageIndex","ceil","store","createStore","action","Object","assign","index","todo","splice","newPageIndex","targetTodo","itemCopy","updatedValue","nonCompletedTodos","curTimeUnix","nonExpiredItems","itemsExpiry","itemsExpiryUnix","nonCompletedItems","newPageNumber","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.841dc699.chunk.js","sourcesContent":["export const actionTypes = {\r\n    ADD_ITEM: \"ADD_ITEM\",\r\n    TOGGLE_IMPORTANT: \"TOGGLE_IMPORTANT\",\r\n    DELETE_ITEM: \"DELETE_ITEM\",\r\n    TOGGLE_COMPLETE: \"TOGGLE_COMPLETE\",\r\n    REMOVE_EXPIRY: \"REMOVE_EXPIRY\",\r\n    UPDATE_EXPIRY: \"UPDATE_EXPIRY\",\r\n    SUBMIT_TEXT_EDIT: \"SUBMIT_TEXT_EDIT\",\r\n    UPDATE_ITEMS_PER_PAGE: \"UPDATE_ITEMS_PER_PAGE\",\r\n    UPDATE_PAGE_NUMBER: \"UPDATE_PAGE_NUMBER\",\r\n    DELETE_ALL_EXPIRED: \"DELETE_ALL_EXPIRED\",\r\n    DELETE_COMPLETED_TODOS: \"DELETE_COMPLETED_TODOS\",\r\n    SET_AUTO_DELETE_COMPLETED: \"SET_AUTO_DELETE_COMPLETED\",\r\n    SET_SHOW_COMPLETED: \"SET_SHOW_COMPLETED\",\r\n\r\n    // DEMO ACTIONS:\r\n    LOAD_DEMO_ITEMS: \"LOAD_DEMO_ITEMS\"\r\n};","import { actionTypes } from '../action-types'\r\n\r\nexport const submitNewTodo = (newTodo) => {\r\n    return {\r\n        type: actionTypes.ADD_ITEM,\r\n        payload: newTodo\r\n    }\r\n}\r\n\r\nexport const toggleImportant = (id) => {\r\n    return {\r\n        type: actionTypes.TOGGLE_IMPORTANT,\r\n        payload: id\r\n    }\r\n}\r\n\r\nexport const deleteItem = (id) => {\r\n    return {\r\n        type: actionTypes.DELETE_ITEM,\r\n        payload: id\r\n    }\r\n}\r\n\r\nexport const toggleComplete = (id) => {\r\n    return {\r\n        type: actionTypes.TOGGLE_COMPLETE,\r\n        payload: id\r\n    }\r\n}\r\n\r\nexport const removeExpiry = (id) => {\r\n    return {\r\n        type: actionTypes.REMOVE_EXPIRY,\r\n        payload: id\r\n    }\r\n}\r\n\r\nexport const updateExpiry = (payload) => {\r\n    return {\r\n        type: actionTypes.UPDATE_EXPIRY,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const submitTextEdit = (payload) => {\r\n    return {\r\n        type: actionTypes.SUBMIT_TEXT_EDIT,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const updateItemsPerPage = (noItems) => {\r\n    return {\r\n        type: actionTypes.UPDATE_ITEMS_PER_PAGE,\r\n        payload: noItems\r\n    }\r\n}\r\n\r\nexport const changePageNumber = (payload) => {\r\n    return {\r\n        type: actionTypes.UPDATE_PAGE_NUMBER,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const deleteExpiredTodos = () => {\r\n    return {\r\n        type: actionTypes.DELETE_ALL_EXPIRED\r\n    }\r\n}\r\n\r\nexport const deleteCompletedTodos = () => {\r\n    return {\r\n        type: actionTypes.DELETE_COMPLETED_TODOS\r\n    }\r\n}\r\n\r\nexport const setAutoDeleteCompleted = (payload) => {\r\n    return {\r\n        type: actionTypes.SET_AUTO_DELETE_COMPLETED,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const setShowCompleted = (payload) => {\r\n    return {\r\n        type: actionTypes.SET_SHOW_COMPLETED,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const loadDemoItems = () => {\r\n    return {\r\n        type: actionTypes.LOAD_DEMO_ITEMS\r\n    }\r\n}","export const getCurDate = () => {\r\n  let fullDate = new Date();\r\n\r\n  // adjust for daylight savings time\r\n  fullDate.setTime(\r\n    fullDate.getTime() - new Date().getTimezoneOffset() * 60 * 1000\r\n  );\r\n  fullDate = fullDate.toISOString();\r\n\r\n  const formattedDate = truncateISO(fullDate);\r\n\r\n  // if something hasn't gone wrong\r\n  if (formattedDate !== fullDate) {\r\n    return formattedDate;\r\n  }\r\n\r\n  return \"2020-01-01T00:00\";\r\n};\r\n\r\nexport const truncateISO = (isoString) => {\r\n  let fullDate = isoString;\r\n\r\n  for (let i = fullDate.length - 1; i >= 0; i--) {\r\n    if (fullDate[i] === \":\") {\r\n      return fullDate.substring(0, i);\r\n    }\r\n  }\r\n\r\n  return isoString;\r\n};\r\n\r\nexport const getMaxDate = () => {\r\n  let fullDate = new Date();\r\n\r\n  // adjust for daylight savings time\r\n  fullDate.setTime(\r\n    fullDate.getTime() - new Date().getTimezoneOffset() * 60 * 1000\r\n  );\r\n  fullDate = fullDate.toISOString();\r\n\r\n  // max date one year ahead\r\n  const yearFromNow = parseInt(fullDate.substring(0, 4)) + 1;\r\n  fullDate = `${yearFromNow}${fullDate.substring(4)}`;\r\n\r\n  const formattedDate = truncateISO(fullDate);\r\n\r\n  // if something hasn't gone wrong\r\n  if (formattedDate !== fullDate) {\r\n    return formattedDate;\r\n  }\r\n  return null;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./ItemSubmissionForm.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { submitNewTodo } from \"./Actions\";\r\nimport { getCurDate, getMaxDate, truncateISO } from \"./utility.js\"\r\n\r\nexport default function ItemSubmissionForm({mobile}) {\r\n  const [todoText, setTodoText] = useState(\"\");\r\n  const [expires, setExpires] = useState(false);\r\n  const [expiryDate, setExpiryDate] = useState(getCurDate());\r\n  const [important, setImportant] = useState(false);\r\n\r\n  let todoId = useSelector((state) => {\r\n    return state.todoId;\r\n  })\r\n\r\n  const handleTextAreaChange = (event) => {\r\n    setTodoText(event.target.value);\r\n    getCurDate();\r\n  };\r\n\r\n  const handleDatePickerChange = (event) => {\r\n    setExpiryDate(event.target.value);\r\n  };\r\n\r\n  const handleSubmission = (e) => {\r\n    let now = new Date();\r\n    now.setTime(now.getTime() - new Date().getTimezoneOffset() * 60 * 1000);\r\n    now = now.toISOString();\r\n\r\n    const newTodo = {\r\n      dateAdded: truncateISO(now),\r\n      id: todoId,\r\n      completed: false,\r\n      text: todoText,\r\n      important: important,\r\n      expires: expires ? expiryDate : null,\r\n    };\r\n\r\n    setImportant(false);\r\n    setTodoText(\"\");\r\n    setExpiryDate(getCurDate());\r\n    setExpires(false);\r\n\r\n    dispatch(submitNewTodo(newTodo));\r\n  };\r\n\r\n  const handleImportantToggle = (e) => {\r\n    setImportant((important) => !important);\r\n  };\r\n\r\n  const handleExpiresToggle = (e) => {\r\n    setExpires((expires) => !expires);\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className={!mobile ? \"FormContainer\" : \"FormContainerMobile\"}>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          handleSubmission(e);\r\n        }}\r\n      >\r\n        <h3 className=\"SubmitHeader\">Submit a new to-do:</h3>\r\n        <div className={!mobile ? \"SubmissionFormContents\" : \"SubmissionFormContentsMobile\"}>\r\n          <div className=\"SubmissionFormGroupLeft\">\r\n            <textarea\r\n              className=\"TodoTextEntry\"\r\n              value={todoText}\r\n              onChange={handleTextAreaChange}\r\n              placeholder=\"Today I must ...\"\r\n            ></textarea>\r\n\r\n            <div className=\"ExpiryDateContainer\">\r\n              <div className=\"ExpiryCheckboxContainer\">\r\n                <label className=\"ExpiresLabel\" htmlFor=\"checkboxExpires\">\r\n                  Expires?\r\n                </label>\r\n                <input\r\n                  className=\"CheckboxExpires\"\r\n                  type=\"checkbox\"\r\n                  id=\"checkboxExpires\"\r\n                  name=\"checkboxExpires\"\r\n                  checked={expires}\r\n                  onChange={handleExpiresToggle}\r\n                />\r\n              </div>\r\n\r\n              <input\r\n                className=\"ExpiryPicker\"\r\n                type=\"datetime-local\"\r\n                id=\"expiry-date\"\r\n                name=\"expiry-date\"\r\n                value={expiryDate}\r\n                min={getCurDate()}\r\n                max={getMaxDate()}\r\n                onChange={handleDatePickerChange}\r\n                disabled={!expires}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className={!mobile ? \"SubmissionFormGroupRight\" : \"ImportantAndSubmitContainer\"}>\r\n\r\n            <div className={!mobile ? \"ImportantStarContainer\" : \"ImportantStarContainerMobile\"}>\r\n              <p className=\"ImportantToggle\" onClick={handleImportantToggle}>\r\n                Important?\r\n              </p>\r\n              <p className=\"ImportantStar\" onClick={handleImportantToggle}>\r\n                {important && \"★\"}\r\n                {!important && \"☆\"}\r\n              </p>\r\n            </div>\r\n\r\n            <input className={!mobile ? \"FormSubmit\" : \"FormSubmitMobile\"} type=\"submit\" value=\"Submit\" />\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./ListItem.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  toggleImportant,\r\n  deleteItem,\r\n  toggleComplete,\r\n  removeExpiry,\r\n  updateExpiry,\r\n  submitTextEdit,\r\n} from \"./Actions\";\r\nimport { getCurDate, getMaxDate } from \"./utility.js\";\r\n\r\nexport default function ListItem({ todoItem }) {\r\n  const { dateAdded, id, completed, text, important, expires } = todoItem;\r\n\r\n  const dispatch = useDispatch();\r\n  const [expiryPickerActive, setExpiryPickerActive] = useState(false);\r\n  const [selectedExpiryDate, setSelectedExpiryDate] = useState(null);\r\n  const [editTodoTextActive, setEditTodoTextActive] = useState(false);\r\n  const [newTodoText, setNewTodoText] = useState(text);\r\n  const autoDeleteCompleted = useSelector((state) => {\r\n    return state.autoDeleteCompleted;\r\n  });\r\n\r\n  const handleToggleImportant = (e) => {\r\n    dispatch(toggleImportant(id));\r\n  };\r\n\r\n  const handleDelete = (e) => {\r\n    dispatch(deleteItem(id));\r\n  };\r\n\r\n  const handleToggleComplete = (e) => {\r\n    // if we're auto-deleting completed todo's, this should perform exactly as the delete button\r\n    if (autoDeleteCompleted) {\r\n      dispatch(deleteItem(id));\r\n    } else {\r\n      dispatch(toggleComplete(id));\r\n    }\r\n  };\r\n\r\n  const handleEditExpiry = (e) => {\r\n    setExpiryPickerActive(true);\r\n  };\r\n\r\n  const handleDatePickerChange = (e) => {\r\n    setSelectedExpiryDate(e.target.value);\r\n  };\r\n\r\n  const handleExpiryRemove = (e) => {\r\n    dispatch(removeExpiry(id));\r\n\r\n    setSelectedExpiryDate(null);\r\n    setExpiryPickerActive(false);\r\n  };\r\n\r\n  const handleCancelExpiryEdit = (e) => {\r\n    setSelectedExpiryDate(null);\r\n    setExpiryPickerActive(false);\r\n  };\r\n\r\n  const handleExpirySubmission = (e) => {\r\n    dispatch(updateExpiry({ id, selectedExpiryDate }));\r\n    setSelectedExpiryDate(null);\r\n    setExpiryPickerActive(false);\r\n  };\r\n\r\n  const handleTextEditSubmission = (e) => {\r\n    if (newTodoText.length !== 0) {\r\n      dispatch(submitTextEdit({ id, newTodoText }));\r\n    }\r\n\r\n    setEditTodoTextActive(false);\r\n  };\r\n\r\n  const handleTextEditCancel = (e) => {\r\n    setNewTodoText(text);\r\n    setEditTodoTextActive(false);\r\n  };\r\n\r\n  const handleEditTextAreaChange = (e) => {\r\n    setNewTodoText(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        \"ListItemContainer\" +\r\n        (completed ? \" Completed\" : \"\") +\r\n        (important ? \" Important\" : \"\")\r\n      }\r\n    >\r\n      {/* DATE */}\r\n      <div className=\"DateContainer\">\r\n        <p className=\"DateAdded\">{formatDate(dateAdded)}</p>\r\n      </div>\r\n\r\n      {/* TODO BODY */}\r\n      <div className=\"TodoTextContainer\">\r\n        {!editTodoTextActive && (\r\n          <>\r\n            <p\r\n              className=\"TextEditButton\"\r\n              onClick={() => {\r\n                setEditTodoTextActive(true);\r\n              }}\r\n            >\r\n              (edit)\r\n            </p>\r\n            <p className=\"TodoText\">{text.length === 0 ? `( No Text )` : `${text}`}</p>\r\n          </>\r\n        )}\r\n        {editTodoTextActive && (\r\n          <>\r\n            <textarea\r\n              className=\"EditTextTextarea\"\r\n              name=\"EditTodoText\"\r\n              rows=\"10\"\r\n              placeholder={text}\r\n              value={newTodoText}\r\n              onChange={handleEditTextAreaChange}\r\n            />\r\n            <div className=\"EditTextButtonsContainer\">\r\n              <button\r\n                className=\"SubmitTextButton\"\r\n                onClick={handleTextEditSubmission}\r\n              >\r\n                Submit Changes\r\n              </button>\r\n              <button\r\n                className=\"RevertTextButton\"\r\n                onClick={() => setNewTodoText(text)}\r\n              >\r\n                Revert\r\n              </button>\r\n              <button\r\n                className=\"CancelTextButton\"\r\n                onClick={handleTextEditCancel}\r\n              >\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {/* BUTTONS */}\r\n      <div className=\"BottomBar\">\r\n        {/* Show the expiry date here if it has one */}\r\n        <div className=\"ExpiresContainer\">\r\n          <p className={\"ExpiresText \"+(isExpired(expires) ? \"ExpiredText\" : \"\")}>\r\n            {expires && \"Expires \" + formatDate(expires)}\r\n            {expires && isExpired(expires) && <span className=\"Expired\"> ! </span>}\r\n            {!expires && \"( No expiry set )\"}\r\n          </p>\r\n          <div>\r\n            <p className=\"EditExpiryText\" onClick={handleEditExpiry}>\r\n              {!expiryPickerActive && \"(edit)\"}\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"ButtonBar\">\r\n          <div className=\"ImportantIcon\" onClick={handleToggleImportant}>\r\n            {important && \"★\"}\r\n            {!important && \"☆\"}\r\n          </div>\r\n\r\n          <div className=\"DeleteIcon\" onClick={handleDelete}>\r\n            ✖\r\n          </div>\r\n\r\n          <div className=\"CompletedIcon\" onClick={handleToggleComplete}>\r\n            {!completed && \"☐\"}\r\n            {completed && \"☑\"}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        {expiryPickerActive && (\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              handleExpirySubmission(e);\r\n            }}\r\n          >\r\n            <div className=\"ExpiryEditContainer\">\r\n              <div className=\"ExpiryPickerEditContainer\">\r\n                <p className=\"ExpiryEditText\">Select:</p>\r\n                <input\r\n                  className=\"ExpiryPickerEdit\"\r\n                  type=\"datetime-local\"\r\n                  id=\"expiry-date\"\r\n                  name=\"expiry-date\"\r\n                  value={selectedExpiryDate || expires || getCurDate()}\r\n                  min={getCurDate()}\r\n                  max={getMaxDate()}\r\n                  onChange={handleDatePickerChange}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"ExpiryRemoveCancel\">\r\n                {expires && (\r\n                  <p\r\n                    className=\"RemoveExpiryButton\"\r\n                    onClick={handleExpiryRemove}\r\n                  >\r\n                    Remove\r\n                  </p>\r\n                )}\r\n                <p\r\n                  className=\"CancelExpiryEditButton\"\r\n                  onClick={handleCancelExpiryEdit}\r\n                >\r\n                  Cancel\r\n                </p>\r\n              </div>\r\n\r\n              <button className=\"ExpiryEditSubmit\" type=\"submit\">\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst formatDate = (rawDate) => {\r\n  const [date, time] = rawDate.split(\"T\");\r\n  const [year, month, day] = date.split(\"-\");\r\n\r\n  return `${day}/${month}/${year}, ${time}`;\r\n};\r\n\r\nconst isExpired = (date) => {\r\n  const dateInUnixTime = Date.parse(date);\r\n  const dateNow = Date.now();\r\n\r\n  return (dateNow >= dateInUnixTime);\r\n}","\r\nexport const ITEMS_PER_PAGE_INCREMENTS = [5, 10, 20];\r\nexport const PAGE_CHANGE_DIRECTIONS = {\r\n  NEXT: \"NEXT\",\r\n  PREV: \"PREV\",\r\n};\r\nexport const SORT_CRITERIA = {\r\n  OLD: \"OLD\",\r\n  NEW: \"NEW\",\r\n  EXPIRY: \"EXPIRY\",\r\n  IMPORTANT: \"IMPORTANT\",\r\n};\r\n\r\nexport const DEMO_ITEMS = [\r\n  {\r\n    dateAdded: \"2020-09-08T10:42\",\r\n    id: 0,\r\n    completed: false,\r\n    text: `  The remaining items will be filler items to demonstrate the pagination feature. \r\n    \\nFor convenience, the Demo Bar has options for quickly adding items to test the individual functionalities.\r\n        `,\r\n    important: false,\r\n    expires: null,\r\n  },\r\n  {\r\n    dateAdded: \"2020-09-08T10:42\",\r\n    id: 1,\r\n    completed: false,\r\n    text:\r\n      'I am an expired item. I will be deleted automatically when you click \"Delete Expired Todos\" in the Options menu',\r\n    important: false,\r\n    expires: \"2015-07-12T13:44\",\r\n  },\r\n  {\r\n    dateAdded: \"2020-09-08T10:42\",\r\n    id: 2,\r\n    completed: true,\r\n    text: `I am a completed todo. You can toggle my visibility by clicking \"Show Completed To-Dos\" in the options menu. \r\n    \\nYou can also opt to automatically delete any todos marked complete.`,\r\n    important: false,\r\n    expires: (parseInt(new Date().getFullYear()) +1)+\"-03-22T17:14\",\r\n  },\r\n  {\r\n    dateAdded: \"2020-09-08T10:42\",\r\n    id: 3,\r\n    completed: false,\r\n    text: `I am an important to-do. You can opt to see me first by selecting \"Important First\" in the Sort-By menu`,\r\n    important: true,\r\n    expires: (parseInt(new Date().getFullYear()) +1)+\"-07-12T13:44\",\r\n  },\r\n  {\r\n    dateAdded: \"2020-09-08T10:42\",\r\n    id: 4,\r\n    completed: false,\r\n    text: ` ... Similarly you can edit or remove the expiry date for any todo by hovering over or tapping the expiry date section and clicking \"edit\"`,\r\n    important: false,\r\n    expires: null,\r\n  },\r\n  {\r\n    dateAdded: \"2020-09-08T10:42\",\r\n    id: 5,\r\n    completed: false,\r\n    text: `You can edit text for a submitted todo by hovering over it on desktop, or tapping it on mobile, and clicking \"edit\" ...`,\r\n    important: false,\r\n    expires: null,\r\n  },\r\n  {\r\n    dateAdded: \"2020-09-08T10:42\",\r\n    id: 6,\r\n    completed: false,\r\n    text: `Along the bottom of each todo are buttons which perform the following actions:\r\n        \\n☆: Toggle important\r\n        \\n✖: Delete this todo\r\n        \\n☐: Toggle complete\r\n    `,\r\n    important: false,\r\n    expires: null,\r\n  },\r\n  {\r\n    dateAdded: \"2020-09-08T10:42\",\r\n    id: 7,\r\n    completed: false,\r\n    text: `Thanks for checking out my todo app!\r\n        \\nNew todos can be added by filling out the form above ↑\r\n        \\nThe todos are paginated. You can change the number of items per page by using the buttons at the bottom of the list. You can jump to a specific page by editing the page number in the bottom right.\r\n        \\nBy default, todos are ordered newest-to-oldest with respect to the time they were added. You can change the sort order in the options menu.\r\n    `,\r\n    important: false,\r\n    expires: null,\r\n  },\r\n  {\r\n    dateAdded: \"2020-08-01T21:47\",\r\n    id: 8,\r\n    completed: false,\r\n    text: `Get Milk`,\r\n    important: false,\r\n    expires: null,\r\n  },\r\n  {\r\n    dateAdded: \"2020-07-02T13:55\",\r\n    id: 9,\r\n    completed: false,\r\n    text: `Call John`,\r\n    important: true,\r\n    expires: null,\r\n  },\r\n  {\r\n    dateAdded: \"2020-08-11T12:34\",\r\n    id: 9,\r\n    completed: false,\r\n    text: `Go Running`,\r\n    important: false,\r\n    expires: null,\r\n  },\r\n  {\r\n    dateAdded: \"2020-02-17T15:31\",\r\n    id: 10,\r\n    completed: false,\r\n    text: `Get Newspaper`,\r\n    important: false,\r\n    expires: null,\r\n  },\r\n  {\r\n    dateAdded: \"2020-07-06T21:27\",\r\n    id: 11,\r\n    completed: false,\r\n    text: `Do Dishes`,\r\n    important: false,\r\n    expires: null,\r\n  },\r\n  {\r\n    dateAdded: \"2020-01-15T08:00\",\r\n    id: 12,\r\n    completed: false,\r\n    text: `Fold Laundry`,\r\n    important: false,\r\n    expires: null,\r\n  },\r\n  {\r\n    dateAdded: \"2020-04-30T03:21\",\r\n    id: 13,\r\n    completed: false,\r\n    text: `Feed Cat`,\r\n    important: false,\r\n    expires: null,\r\n  },  {\r\n    dateAdded: \"2020-06-14T02:31\",\r\n    id: 14,\r\n    completed: false,\r\n    text: `Make doctors appointment`,\r\n    important: false,\r\n    expires: null,\r\n  },  {\r\n    dateAdded: \"2020-05-07T17:04\",\r\n    id: 15,\r\n    completed: false,\r\n    text: `Replace ink in printer`,\r\n    important: true,\r\n    expires: null,\r\n  },  {\r\n    dateAdded: \"2020-03-26T19:39\",\r\n    id: 16,\r\n    completed: false,\r\n    text: `Change lightbulb`,\r\n    important: false,\r\n    expires: \"2020-01-01T13:21\",\r\n  },  {\r\n    dateAdded: \"2020-08-01T13:21\",\r\n    id: 17,\r\n    completed: false,\r\n    text: `Walk dog`,\r\n    important: false,\r\n    expires: null,\r\n  },  {\r\n    dateAdded: \"2020-07-28T01:11\",\r\n    id: 18,\r\n    completed: false,\r\n    text: `Make packed lunch`,\r\n    important: false,\r\n    expires: null,\r\n  },  {\r\n    dateAdded: \"2020-02-16T06:09\",\r\n    id: 19,\r\n    completed: false,\r\n    text: `Mop kitchen`,\r\n    important: true,\r\n    expires: null,\r\n  },  {\r\n    dateAdded: \"2020-09-01T08:42\",\r\n    id: 20,\r\n    completed: false,\r\n    text: `Take out bins`,\r\n    important: false,\r\n    expires: \"2020-02-07T17:11\",\r\n  },  {\r\n    dateAdded: \"2020-02-18T11:47\",\r\n    id: 21,\r\n    completed: false,\r\n    text: `Book restaurant`,\r\n    important: false,\r\n    expires: null,\r\n  },\r\n  {\r\n    dateAdded: \"2020-02-21T13:07\",\r\n    id: 22,\r\n    completed: false,\r\n    text: `Buy birthday gift`,\r\n    important: false,\r\n    expires: null,\r\n  },  {\r\n    dateAdded: \"2020-05-01T16:42\",\r\n    id: 23,\r\n    completed: false,\r\n    text: `Pay electric bill`,\r\n    important: false,\r\n    expires: null,\r\n  },\r\n];\r\n\r\nexport const INITIAL_STATE = {\r\n  // unique key for each todo item, incr each time a new item added\r\n  todoId: 0,\r\n  itemsPerPage: ITEMS_PER_PAGE_INCREMENTS[0],\r\n  pageIndex: 0,\r\n  todos: [],\r\n  autoDeleteCompleted: false,\r\n  showCompleted: true,\r\n};\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport \"./ListWide.css\";\r\nimport ListItem from \"./ListItem\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { SORT_CRITERIA } from \"./constants\";\r\nimport {\r\n  deleteExpiredTodos,\r\n  deleteCompletedTodos,\r\n  setAutoDeleteCompleted,\r\n  setShowCompleted,\r\n  changePageNumber\r\n} from \"./Actions\";\r\n\r\nexport default function ListWide() {\r\n  const [sortCriterion, setSortCriterion] = useState(SORT_CRITERIA.NEW);\r\n  const autoDeleteCompleted = useSelector((state) => {\r\n    return state.autoDeleteCompleted;\r\n  });\r\n  const showCompletedTodos = useSelector((state) => {\r\n    return state.showCompleted;\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const visibleListItems = useSelector((state) => {\r\n    return getVisibleListItems(\r\n      state.todos,\r\n      state.itemsPerPage,\r\n      state.pageIndex,\r\n      sortCriterion,\r\n      showCompletedTodos\r\n    );\r\n  });\r\n\r\n  const [startIndex, endIndex, numItems] = useSelector((state) => {\r\n    let startIndex = state.pageIndex * state.itemsPerPage + 1;\r\n    let endIndex = startIndex + state.itemsPerPage - 1;\r\n    let numItems = state.todos.length;\r\n\r\n    return [startIndex, endIndex, numItems];\r\n  });\r\n\r\n  const handleSortByChange = (e) => {\r\n    dispatch(changePageNumber(0));\r\n    setSortCriterion(e.target.value);\r\n  };\r\n\r\n  const handleDeleteExpired = (e) => {\r\n    dispatch(deleteExpiredTodos());\r\n  };\r\n\r\n  const handleToggleShowCompletedTodos = (e) => {\r\n    dispatch(setShowCompleted(!showCompletedTodos));\r\n  };\r\n\r\n  const handleDeleteCompletedTodos = (e) => {\r\n    dispatch(deleteCompletedTodos());\r\n  };\r\n\r\n  const toggleDeleteCompletedAutomatically = (e) => {\r\n\r\n    // if we're setting it to true, we need to delete those todos currently marked active\r\n    if (!autoDeleteCompleted) {\r\n      dispatch(deleteCompletedTodos());\r\n    }\r\n\r\n    dispatch(setAutoDeleteCompleted(!autoDeleteCompleted));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* LIST */}\r\n      <h3 className=\"Showing\">{`Showing (${startIndex}-${endIndex}) of ${numItems} items`}</h3>\r\n\r\n      <div className=\"ListContainer\">\r\n        <div className=\"ListLeft\">\r\n          <div className=\"ListItemsContainer\">\r\n            {visibleListItems.length > 0 ? (\r\n              visibleListItems.map((item) => {\r\n                return (\r\n                  <ListItem\r\n                    todoItem={item}\r\n                    key={item.dateAdded + Math.random()}\r\n                  />\r\n                );\r\n              })\r\n            ) : (\r\n              <p className=\"NoItemsTip\">(Tip - You can quickly add demo items using the demo bar at the top of the page)</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"ListRight\">\r\n          <h3 className=\"OptionsHeader\">Options</h3>\r\n\r\n          <hr className=\"Divider\" />\r\n\r\n          <div className=\"SortBySection OptionsItem\">\r\n            <label className=\"SortBySelectLabel\" htmlFor=\"SortBySelect\">\r\n              Sort By:\r\n            </label>\r\n            <select\r\n              className=\"SortBySelect\"\r\n              name=\"SortBySelect\"\r\n              id=\"SortBySelect\"\r\n              value={sortCriterion}\r\n              onChange={handleSortByChange}\r\n            >\r\n              <option value=\"NEW\">Date Added (Newest)</option>\r\n              <option value=\"OLD\">Date Added (Oldest)</option>\r\n              <option value=\"EXPIRY\">Expires Soon</option>\r\n              <option value=\"IMPORTANT\">Important First</option>\r\n            </select>\r\n          </div>\r\n\r\n          <hr className=\"Divider\" />\r\n\r\n          <div className=\"ShowCompletedContainer OptionsItem\">\r\n            <div>\r\n              <label htmlFor=\"show-completed\">Show Completed To-Dos?</label>\r\n              <input\r\n                name=\"show-completed\"\r\n                type=\"checkbox\"\r\n                checked={showCompletedTodos}\r\n                onChange={handleToggleShowCompletedTodos}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <hr className=\"Divider\" />\r\n\r\n          <div className=\"DeleteCompletedContainer OptionsItem\">\r\n            <button\r\n              className=\"OptionsButton\"\r\n              name=\"delete-completed\"\r\n              onClick={handleDeleteCompletedTodos}\r\n            >\r\n              Delete Completed To-dos\r\n            </button>\r\n            <label className=\"CannotUndoLabel\" htmlFor=\"delete-completed\">\r\n              (This cannot be undone)\r\n            </label>\r\n            <div className=\"AutoDeleteCompletedContainer\">\r\n              <label\r\n                className=\"AutoDeleteCompletedLabel\"\r\n                htmlFor=\"auto-delete-completed\"\r\n              >\r\n                Do this automatically\r\n              </label>\r\n              <input\r\n                name=\"auto-delete-completed\"\r\n                type=\"checkbox\"\r\n                checked={autoDeleteCompleted}\r\n                onChange={toggleDeleteCompletedAutomatically}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <hr className=\"Divider\" />\r\n\r\n          <div className=\"DeleteExpiredContainer OptionsItem\">\r\n            <button className=\"OptionsButton\" onClick={handleDeleteExpired}>\r\n              Delete Expired To-dos\r\n            </button>\r\n            <label className=\"CannotUndoLabel\">(This cannot be undone)</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst getVisibleListItems = (\r\n  list,\r\n  itemsPerPage,\r\n  pageIndex,\r\n  sortCriterion,\r\n  showCompleted\r\n) => {\r\n\r\n  let sortedList = applySortCriterion([...list], sortCriterion); // don't modify original\r\n  // remove completed items if showCompleted not checked\r\n  if (!showCompleted) {\r\n    sortedList = sortedList.filter((item) => {\r\n      return !item.completed;\r\n    });\r\n  }\r\n\r\n  const startIndex = itemsPerPage * pageIndex;\r\n\r\n  const subset = sortedList.slice(startIndex, startIndex + itemsPerPage);\r\n  return subset;\r\n};\r\n\r\nconst applySortCriterion = (list, sortCriterion) => {\r\n  // list items stored in order of addition\r\n  //  means implicitly the list is sorted oldest - newest\r\n  switch (sortCriterion) {\r\n    case SORT_CRITERIA.OLD:\r\n      list.sort((a, b) => {\r\n        let aDateAdded = a.dateAdded;\r\n        let bDateAdded = b.dateAdded;\r\n        let aID = a.id;\r\n        let bID = b.id;\r\n\r\n        let aDateAddedUnixTime = Date.parse(aDateAdded);\r\n        let bDateAddedUnixTime = Date.parse(bDateAdded);\r\n\r\n        if (aDateAddedUnixTime === bDateAddedUnixTime) {\r\n          // were submitted in the same minute, so check id as a fall back\r\n          if (a.id > b.id) return 1;\r\n          return -1;\r\n        };\r\n        if (aDateAddedUnixTime < bDateAddedUnixTime) return -1;\r\n        return 1;\r\n      });\r\n\r\n      return list;\r\n    case SORT_CRITERIA.NEW:\r\n\r\n      list.sort((a, b) => {\r\n        let aDateAdded = a.dateAdded;\r\n        let bDateAdded = b.dateAdded;\r\n\r\n        let aID = a.id;\r\n        let bID = b.id;\r\n\r\n        let aDateAddedUnixTime = Date.parse(aDateAdded);\r\n        let bDateAddedUnixTime = Date.parse(bDateAdded);\r\n\r\n        if (aDateAddedUnixTime === bDateAddedUnixTime) {\r\n          // were submitted in the same minute, so check id as a fall back\r\n          if (a.id > b.id) return -1;\r\n          return 1;\r\n        };\r\n        if (aDateAddedUnixTime < bDateAddedUnixTime) return 1;\r\n        return -1;\r\n      });\r\n\r\n      return list;\r\n    case SORT_CRITERIA.IMPORTANT:\r\n      list.sort((a, b) => {\r\n        let aIsImportant = a.important;\r\n        let bIsImportant = b.important;\r\n\r\n        if (aIsImportant && bIsImportant) return 0;\r\n        if (aIsImportant && !bIsImportant) return -1;\r\n        return 1;\r\n      });\r\n      return list;\r\n    case SORT_CRITERIA.EXPIRY:\r\n\r\n      list.sort((a, b) => {\r\n        let aExpiry = a.expires;\r\n        let bExpiry = b.expires;\r\n\r\n        // if neither have an expiry...\r\n        if (aExpiry == null && bExpiry == null) return 0; // ... order irrelevant\r\n\r\n        // if one has an expiry ...\r\n        if (aExpiry == null || bExpiry == null) return aExpiry ? -1 : 1; // ...that item comes first\r\n\r\n        // otherwise both have an expiry\r\n        let aExpiryUnixTime = Date.parse(aExpiry);\r\n        let bExpiryUnixTime = Date.parse(bExpiry);\r\n\r\n        return aExpiryUnixTime - bExpiryUnixTime;\r\n      });\r\n      return list;\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./ListMobile.css\";\r\nimport ListItem from \"./ListItem\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { SORT_CRITERIA } from \"./constants\";\r\nimport {\r\n  deleteExpiredTodos,\r\n  deleteCompletedTodos,\r\n  setAutoDeleteCompleted,\r\n  setShowCompleted,\r\n  changePageNumber  \r\n} from \"./Actions\";\r\n\r\nexport default function ListMobile() {\r\n  const [optionsActive, setOptionsActive] = useState(false);\r\n\r\n  const [sortCriterion, setSortCriterion] = useState(SORT_CRITERIA.NEW);\r\n  const autoDeleteCompleted = useSelector((state) => {\r\n    return state.autoDeleteCompleted;\r\n  });\r\n  const showCompletedTodos = useSelector((state) => {\r\n    return state.showCompleted;\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const visibleListItems = useSelector((state) => {\r\n    return getVisibleListItems(\r\n      state.todos,\r\n      state.itemsPerPage,\r\n      state.pageIndex,\r\n      sortCriterion,\r\n      showCompletedTodos\r\n    );\r\n  });\r\n\r\n  const [startIndex, endIndex, numItems] = useSelector((state) => {\r\n    let startIndex = state.pageIndex * state.itemsPerPage + 1;\r\n    let endIndex = startIndex + state.itemsPerPage - 1;\r\n    let numItems = state.todos.length;\r\n\r\n    return [startIndex, endIndex, numItems];\r\n  });\r\n\r\n  const handleSortByChange = (e) => {\r\n    dispatch(changePageNumber(0));\r\n    setSortCriterion(e.target.value);\r\n  };\r\n\r\n  const handleDeleteExpired = (e) => {\r\n    dispatch(deleteExpiredTodos());\r\n  };\r\n\r\n  const handleToggleShowCompletedTodos = (e) => {\r\n    dispatch(setShowCompleted(!showCompletedTodos));\r\n  };\r\n\r\n  const handleDeleteCompletedTodos = (e) => {\r\n    dispatch(deleteCompletedTodos());\r\n  };\r\n\r\n  const toggleDeleteCompletedAutomatically = (e) => {\r\n    // if we're setting it to true, we need to delete those todos currently marked active\r\n    if (!autoDeleteCompleted) {\r\n      dispatch(deleteCompletedTodos());\r\n    }\r\n\r\n    dispatch(setAutoDeleteCompleted(!autoDeleteCompleted));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* THE OPTIONS */}\r\n      <div\r\n        className=\"OptionsToggle\"\r\n        onClick={() => {\r\n          setOptionsActive((optionsActive) => !optionsActive);\r\n        }}\r\n      >\r\n        <p className=\"OptionsToggleText\">Options ...</p>\r\n        <p className=\"OptionsToggleArrow\">⇵</p>\r\n      </div>\r\n\r\n      {!optionsActive && <hr className=\"Divider\" />}\r\n\r\n      {optionsActive && (\r\n        <>\r\n          <div className=\"OptionsMobile\">\r\n            <div className=\"SortBySection OptionsItem\">\r\n              <label className=\"SortBySelectLabel\" htmlFor=\"SortBySelect\">\r\n                Sort By:\r\n              </label>\r\n              <select\r\n                className=\"SortBySelect\"\r\n                name=\"SortBySelect\"\r\n                id=\"SortBySelect\"\r\n                value={sortCriterion}\r\n                onChange={handleSortByChange}\r\n              >\r\n                <option value=\"NEW\">Date Added (Newest)</option>\r\n                <option value=\"OLD\">Date Added (Oldest)</option>\r\n                <option value=\"EXPIRY\">Expires Soon</option>\r\n                <option value=\"IMPORTANT\">Important First</option>\r\n              </select>\r\n            </div>\r\n\r\n            <hr className=\"Divider\" />\r\n\r\n            <div className=\"ShowCompletedContainer OptionsItem\">\r\n              <div>\r\n                <label htmlFor=\"show-completed\">Show Completed To-Dos?</label>\r\n                <input\r\n                  name=\"show-completed\"\r\n                  type=\"checkbox\"\r\n                  checked={showCompletedTodos}\r\n                  onChange={handleToggleShowCompletedTodos}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <hr className=\"Divider\" />\r\n\r\n            <div className=\"DeleteCompletedContainer OptionsItem\">\r\n              <button\r\n                className=\"OptionsButton\"\r\n                name=\"delete-completed\"\r\n                onClick={handleDeleteCompletedTodos}\r\n              >\r\n                Delete Completed To-dos\r\n              </button>\r\n              <label className=\"CannotUndoLabel\" htmlFor=\"delete-completed\">\r\n                (This cannot be undone)\r\n              </label>\r\n              <div className=\"AutoDeleteCompletedContainer\">\r\n                <label\r\n                  className=\"AutoDeleteCompletedLabel\"\r\n                  htmlFor=\"auto-delete-completed\"\r\n                >\r\n                  Do this automatically\r\n                </label>\r\n                <input\r\n                  name=\"auto-delete-completed\"\r\n                  type=\"checkbox\"\r\n                  checked={autoDeleteCompleted}\r\n                  onChange={toggleDeleteCompletedAutomatically}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <hr className=\"Divider\" />\r\n\r\n            <div className=\"DeleteExpiredContainer OptionsItem\">\r\n              <button className=\"OptionsButton\" onClick={handleDeleteExpired}>\r\n                Delete Expired To-dos\r\n              </button>\r\n              <label className=\"CannotUndoLabel\">(This cannot be undone)</label>\r\n            </div>\r\n          </div>\r\n\r\n          <hr className=\"Divider\" />\r\n        </>\r\n      )}\r\n\r\n      {/* THE LIST */}\r\n      <h3 className=\"Showing\">{`Showing (${startIndex}-${endIndex}) of ${numItems} items`}</h3>\r\n\r\n      <div className=\"ListContainerMobile\">\r\n        <div className=\"ListItemsContainerMobile\">\r\n          {visibleListItems.length > 0 ? (\r\n            visibleListItems.map((item) => {\r\n              return (\r\n                <ListItem\r\n                  todoItem={item}\r\n                  key={item.dateAdded + Math.random()}\r\n                />\r\n              );\r\n            })\r\n          ) : (\r\n            <>\r\n              <p className=\"NoItemsTip\">\r\n                (Tip - You can quickly add demo items using the demo bar at the\r\n                top of the page)\r\n              </p>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst getVisibleListItems = (\r\n  list,\r\n  itemsPerPage,\r\n  pageIndex,\r\n  sortCriterion,\r\n  showCompleted\r\n) => {\r\n  let sortedList = applySortCriterion([...list], sortCriterion); // don't modify original\r\n  // remove completed items if showCompleted not checked\r\n  if (!showCompleted) {\r\n    sortedList = sortedList.filter((item) => {\r\n      return !item.completed;\r\n    });\r\n  }\r\n\r\n  const startIndex = itemsPerPage * pageIndex;\r\n\r\n  const subset = sortedList.slice(startIndex, startIndex + itemsPerPage);\r\n  return subset;\r\n};\r\n\r\nconst applySortCriterion = (list, sortCriterion) => {\r\n  // list items stored in order of addition\r\n  //  means implicitly the list is sorted oldest - newest\r\n  switch (sortCriterion) {\r\n    case SORT_CRITERIA.OLD:\r\n      list.sort((a, b) => {\r\n        let aDateAdded = a.dateAdded;\r\n        let bDateAdded = b.dateAdded;\r\n        let aID = a.id;\r\n        let bID = b.id;\r\n\r\n        let aDateAddedUnixTime = Date.parse(aDateAdded);\r\n        let bDateAddedUnixTime = Date.parse(bDateAdded);\r\n\r\n        if (aDateAddedUnixTime === bDateAddedUnixTime) {\r\n          // were submitted in the same minute, so check id as a fall back\r\n          if (a.id > b.id) return 1;\r\n          return -1;\r\n        }\r\n        if (aDateAddedUnixTime < bDateAddedUnixTime) return -1;\r\n        return 1;\r\n      });\r\n\r\n      return list;\r\n    case SORT_CRITERIA.NEW:\r\n      list.sort((a, b) => {\r\n        let aDateAdded = a.dateAdded;\r\n        let bDateAdded = b.dateAdded;\r\n\r\n        let aID = a.id;\r\n        let bID = b.id;\r\n\r\n        let aDateAddedUnixTime = Date.parse(aDateAdded);\r\n        let bDateAddedUnixTime = Date.parse(bDateAdded);\r\n\r\n        if (aDateAddedUnixTime === bDateAddedUnixTime) {\r\n          // were submitted in the same minute, so check id as a fall back\r\n          if (a.id > b.id) return -1;\r\n          return 1;\r\n        }\r\n        if (aDateAddedUnixTime < bDateAddedUnixTime) return 1;\r\n        return -1;\r\n      });\r\n\r\n      return list;\r\n    case SORT_CRITERIA.IMPORTANT:\r\n      list.sort((a, b) => {\r\n        let aIsImportant = a.important;\r\n        let bIsImportant = b.important;\r\n\r\n        if (aIsImportant && bIsImportant) return 0;\r\n        if (aIsImportant && !bIsImportant) return -1;\r\n        return 1;\r\n      });\r\n      return list;\r\n    case SORT_CRITERIA.EXPIRY:\r\n\r\n      list.sort((a, b) => {\r\n        let aExpiry = a.expires;\r\n        let bExpiry = b.expires;\r\n\r\n        // if neither have an expiry...\r\n        if (aExpiry == null && bExpiry == null) return 0; // ... order irrelevant\r\n\r\n        // if one has an expiry ...\r\n        if (aExpiry == null || bExpiry == null) return aExpiry ? -1 : 1; // ...that item comes first\r\n\r\n        // otherwise both have an expiry\r\n        let aExpiryUnixTime = Date.parse(aExpiry);\r\n        let bExpiryUnixTime = Date.parse(bExpiry);\r\n\r\n        return aExpiryUnixTime - bExpiryUnixTime;\r\n      });\r\n      return list;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./Pagination.css\";\r\nimport { ITEMS_PER_PAGE_INCREMENTS, PAGE_CHANGE_DIRECTIONS } from \"./constants\";\r\nimport { updateItemsPerPage, changePageNumber } from \"./Actions\";\r\n\r\nexport default function Pagination() {\r\n  const dispatch = useDispatch();\r\n\r\n  const pageNumber = useSelector((state) => {\r\n    return state.pageIndex;\r\n  });\r\n\r\n  const handleItemsPerPageChange = (noItems) => {\r\n    dispatch(updateItemsPerPage(noItems));\r\n  };\r\n\r\n  const handlePageNumberInput = (e) => {\r\n    const keyCode = e.keyCode || e.which;\r\n    // keyCode === 13 => triggered by ENTER key\r\n    // keyCode == null => triggered by lose focus\r\n    if (keyCode === 13 || keyCode == null) {\r\n      if (e.target.value !== \"\") {\r\n        dispatch(changePageNumber(parseInt(e.target.value) - 1));\r\n      } else {\r\n        e.target.placeholder = parseInt(pageNumber) + 1;\r\n      }\r\n      e.target.value = \"\";\r\n      e.target.blur();\r\n    }\r\n  };\r\n\r\n  const handlePageArrowClick = (direction) => {\r\n    dispatch(changePageNumber(direction));\r\n  };\r\n\r\n  const [prevDisabled, nextDisabled] = useSelector((state) => {\r\n    let isPrevDisabled = state.pageIndex === 0;\r\n\r\n    let todosCopy = [...state.todos];\r\n    let numTodos = state.todos.length;\r\n\r\n    if (!state.showCompleted) {\r\n      let nonCompletedTodos = todosCopy.filter((item) => {return !item.completed});\r\n      numTodos = nonCompletedTodos.length;\r\n    }\r\n    let isNextDisabled =\r\n      numTodos - (state.pageIndex + 1) * state.itemsPerPage <= 0;\r\n    return [isPrevDisabled, isNextDisabled];\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"PaginationContainerOuter\">\r\n        <div className=\"PaginationContainerInner\">\r\n          <div className=\"ItemsPerPageContainer\">\r\n            <p className=\"ItemsPerPageLabel\">Items Per Page:</p>\r\n            <button\r\n              className=\"ItemsPerPageButton\"\r\n              onClick={() => {\r\n                handleItemsPerPageChange(ITEMS_PER_PAGE_INCREMENTS[0]);\r\n              }}\r\n            >\r\n              {ITEMS_PER_PAGE_INCREMENTS[0]}\r\n            </button>\r\n            <button\r\n              className=\"ItemsPerPageButton\"\r\n              onClick={() =>\r\n                handleItemsPerPageChange(ITEMS_PER_PAGE_INCREMENTS[1])\r\n              }\r\n            >\r\n              {ITEMS_PER_PAGE_INCREMENTS[1]}\r\n            </button>\r\n            <button\r\n              className=\"ItemsPerPageButton\"\r\n              onClick={() =>\r\n                handleItemsPerPageChange(ITEMS_PER_PAGE_INCREMENTS[2])\r\n              }\r\n            >\r\n              {ITEMS_PER_PAGE_INCREMENTS[2]}\r\n            </button>\r\n          </div>\r\n          <div className=\"PageNumberContainer\">\r\n            <button\r\n              className=\"PageNumberButton PagePrev\"\r\n              onClick={() => {\r\n                handlePageArrowClick(PAGE_CHANGE_DIRECTIONS.PREV);\r\n              }}\r\n              disabled={prevDisabled}\r\n            >\r\n              ⇐\r\n            </button>\r\n            <input\r\n              className=\"PageNumberInput\"\r\n              name=\"PageNumberInput\"\r\n              pattern=\"[0-9]\"\r\n              type=\"number\"\r\n              placeholder={parseInt(pageNumber) + 1}\r\n              onFocus={(e) => {\r\n                e.target.placeholder = \"\";\r\n              }}\r\n              onKeyPress={handlePageNumberInput}\r\n              onBlur={handlePageNumberInput}\r\n            />\r\n            <button\r\n              className=\"PageNumberButton PageNext\"\r\n              onClick={() => {\r\n                handlePageArrowClick(PAGE_CHANGE_DIRECTIONS.NEXT);\r\n              }}\r\n              disabled={nextDisabled}\r\n            >\r\n              ⇒\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { submitNewTodo, loadDemoItems } from \"./Actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ItemSubmissionForm from \"./ItemSubmissionForm\";\r\nimport ListWide from \"./ListWide\";\r\nimport ListMobile from \"./ListMobile\";\r\nimport Pagination from \"./Pagination\";\r\nimport { getCurDate } from \"./utility\";\r\n\r\nfunction App() {\r\n  // *- DEBUG/DEMO: ------------------------*\r\n  const todoId = useSelector((state) => {\r\n    return state.todoId;\r\n  });\r\n  const dispatch = useDispatch();\r\n\r\n  const addImportantItem = () => {\r\n    const dummyItem = {\r\n      dateAdded: \"2020-09-01T18:44\",\r\n      id: todoId,\r\n      completed: false,\r\n      text: \"Sample Important Todo\",\r\n      important: true,\r\n      expires: null,\r\n    };\r\n\r\n    dispatch(submitNewTodo(dummyItem));\r\n  };\r\n\r\n  const addDemoItems = () => {\r\n    dispatch(loadDemoItems());\r\n  }\r\n\r\n  const addCompleteItem = () => {\r\n    let item = {\r\n      dateAdded: getCurDate(),\r\n      id: todoId,\r\n      completed: true,\r\n      text: \"Sample Completed Todo\",\r\n      important: false,\r\n      expires: null\r\n    }\r\n\r\n    dispatch(submitNewTodo(item))\r\n  }\r\n\r\n  const addExpiredItem = () => {\r\n    let item = {\r\n      dateAdded: getCurDate(),\r\n      id: todoId,\r\n      completed: false,\r\n      text: \"Sample Expired Todo\",\r\n      important: false,\r\n      expires: \"2000-01-01T08:00\"\r\n    };\r\n\r\n    dispatch(submitNewTodo(item));\r\n  }\r\n  // *----------------------------------------*\r\n\r\n  const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\r\n  const viewBreakpoint = 720;\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => {\r\n      setViewportWidth(window.innerWidth);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n\r\n    <>\r\n      <div className=\"DemoBar\">\r\n        <p className=\"DemoBarHeader\">Demo Bar »</p>\r\n        <p className=\"DemoBarItem\" onClick={addDemoItems}>Try Demo Items</p>\r\n        <p className=\"DemoBarItem\" onClick={addImportantItem}>Add Important Item</p>\r\n        <p className=\"DemoBarItem\" onClick={addExpiredItem}>Add Expired Item</p>\r\n        <p className=\"DemoBarItem\" onClick={addCompleteItem}>Add Completed Item</p>\r\n      </div>\r\n      <div className=\"App\">\r\n\r\n        <h1 className={viewportWidth > viewBreakpoint ? \"Header\" : \"HeaderMobile\"}> ➲ To-Do List</h1>\r\n\r\n        <div className=\"AppBody\">\r\n          <ItemSubmissionForm mobile={(viewportWidth <= viewBreakpoint)}/>\r\n          <hr className=\"Divider\" />\r\n          {/* <List /> */}\r\n          {viewportWidth > viewBreakpoint ? <ListWide /> : <ListMobile />}\r\n          <hr className=\"Divider\" />\r\n          <Pagination />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { actionTypes } from \"../action-types\";\r\nimport {\r\n  INITIAL_STATE,\r\n  PAGE_CHANGE_DIRECTIONS,\r\n  DEMO_ITEMS,\r\n} from \"../constants.js\";\r\n\r\nexport const rootReducer = (state = INITIAL_STATE, action) => {\r\n\r\n  switch (action.type) {\r\n    \r\n    case actionTypes.ADD_ITEM: {\r\n      return Object.assign({}, state, {\r\n        todoId: state.todoId + 1,\r\n        todos: [...state.todos, action.payload],\r\n      });\r\n    };\r\n\r\n    case actionTypes.TOGGLE_IMPORTANT: {\r\n      let todosCopy = [...state.todos];\r\n      let id = action.payload;\r\n\r\n      let index = -1;\r\n      for (let i = 0; i < todosCopy.length; i++) {\r\n        if (todosCopy[i].id === id) {\r\n          index = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      let todo = Object.assign({}, todosCopy[index]);\r\n      todo.important = !todo.important;\r\n\r\n      // replace it\r\n      todosCopy.splice(index, 1, todo);\r\n\r\n      return Object.assign({}, state, {\r\n        todos: todosCopy,\r\n      });\r\n    };\r\n\r\n    case actionTypes.DELETE_ITEM: {\r\n      let todosCopy = [...state.todos];\r\n      let id = action.payload;\r\n\r\n      let index = -1;\r\n      for (let i = 0; i < todosCopy.length; i++) {\r\n        if (todosCopy[i].id === id) {\r\n          index = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      todosCopy.splice(index, 1);\r\n\r\n      // adjust page index if necessary\r\n      let newPageIndex = validatePageNumber(\r\n        state.pageIndex,\r\n        state.itemsPerPage,\r\n        todosCopy.length\r\n      );\r\n\r\n      return Object.assign({}, state, {\r\n        todos: todosCopy,\r\n        pageIndex: newPageIndex,\r\n      });\r\n    };\r\n\r\n    case actionTypes.TOGGLE_COMPLETE: {\r\n      const id = action.payload;\r\n      let todosCopy = [...state.todos];\r\n\r\n      let index = -1;\r\n      for (let i = 0; i < todosCopy.length; i++) {\r\n        if (todosCopy[i].id === id) {\r\n          index = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      let targetTodo = Object.assign({}, todosCopy[index]);\r\n      targetTodo.completed = !targetTodo.completed;\r\n\r\n      todosCopy.splice(index, 1, targetTodo);\r\n\r\n      return Object.assign({}, state, {\r\n        todos: todosCopy,\r\n      });\r\n    };\r\n\r\n    case actionTypes.REMOVE_EXPIRY: {\r\n      const id = action.payload;\r\n      const todosCopy = [...state.todos];\r\n\r\n      const index = getTodoIndexById(todosCopy, id);\r\n      const itemCopy = Object.assign({}, todosCopy[index]);\r\n\r\n      itemCopy.expires = null;\r\n      todosCopy.splice(index, 1, itemCopy);\r\n\r\n      return Object.assign({}, state, {\r\n        todos: todosCopy,\r\n      });\r\n    };\r\n\r\n    case actionTypes.UPDATE_EXPIRY: {\r\n      const { id, selectedExpiryDate } = action.payload;\r\n\r\n      const todosCopy = [...state.todos];\r\n\r\n      const index = getTodoIndexById(todosCopy, id);\r\n      const itemCopy = Object.assign({}, todosCopy[index]);\r\n\r\n      itemCopy.expires = selectedExpiryDate;\r\n      todosCopy.splice(index, 1, itemCopy);\r\n\r\n      return Object.assign({}, state, {\r\n        todos: todosCopy,\r\n      });\r\n    };\r\n\r\n    case actionTypes.SUBMIT_TEXT_EDIT: {\r\n      const { id, newTodoText } = action.payload;\r\n\r\n      const todosCopy = [...state.todos];\r\n      const index = getTodoIndexById(todosCopy, id);\r\n\r\n      const itemCopy = Object.assign({}, todosCopy[index]);\r\n      itemCopy.text = newTodoText;\r\n\r\n      todosCopy.splice(index, 1, itemCopy);\r\n\r\n      return Object.assign({}, state, {\r\n        todos: todosCopy,\r\n      });\r\n    };\r\n\r\n    case actionTypes.UPDATE_ITEMS_PER_PAGE: {\r\n      return Object.assign({}, state, {\r\n        itemsPerPage: action.payload,\r\n        pageIndex: 0,\r\n      });\r\n    };\r\n\r\n    case actionTypes.UPDATE_PAGE_NUMBER: {\r\n\r\n      let updatedValue = 0;\r\n\r\n      switch (action.payload) {\r\n        case PAGE_CHANGE_DIRECTIONS.NEXT:\r\n          updatedValue = state.pageIndex + 1;\r\n          break;\r\n        case PAGE_CHANGE_DIRECTIONS.PREV:\r\n          updatedValue = state.pageIndex - 1;\r\n          break;\r\n        default:\r\n          let numTodos;\r\n          if (!state.showCompleted) {\r\n            const todosCopy = [...state.todos];\r\n            const nonCompletedTodos = todosCopy.filter((item) => {\r\n              return !item.completed;\r\n            });\r\n            numTodos = nonCompletedTodos.length;\r\n          } else {\r\n            numTodos = state.todos.length;\r\n          }\r\n\r\n          updatedValue = validatePageNumber(\r\n            action.payload,\r\n            state.itemsPerPage,\r\n            numTodos\r\n          );\r\n          break;\r\n      }\r\n\r\n      return Object.assign({}, state, {\r\n        pageIndex: updatedValue,\r\n      });\r\n    };\r\n\r\n    case actionTypes.DELETE_ALL_EXPIRED: {\r\n      const todosCopy = [...state.todos];\r\n\r\n      const curTimeUnix = Date.now();\r\n\r\n      const nonExpiredItems = todosCopy.filter((item, index) => {\r\n        const itemsExpiry = item.expires;\r\n        if (itemsExpiry) {\r\n          const itemsExpiryUnix = Date.parse(itemsExpiry);\r\n          if (curTimeUnix - itemsExpiryUnix <= 0) return true;\r\n        } else {\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n\r\n      // adjust page index if necessary\r\n      let newPageIndex = validatePageNumber(\r\n        state.pageIndex,\r\n        state.itemsPerPage,\r\n        nonExpiredItems.length\r\n      );\r\n\r\n      return Object.assign({}, state, {\r\n        todos: nonExpiredItems,\r\n        pageIndex: newPageIndex,\r\n      });\r\n    };\r\n\r\n    case actionTypes.DELETE_COMPLETED_TODOS: {\r\n      let todosCopy = [...state.todos];\r\n\r\n      let nonCompletedItems = todosCopy.filter((item) => {\r\n        return !item.completed;\r\n      });\r\n\r\n      // adjust page index if necessary\r\n      let newPageIndex = validatePageNumber(\r\n        state.pageIndex,\r\n        state.itemsPerPage,\r\n        nonCompletedItems.length\r\n      );\r\n\r\n      return Object.assign({}, state, {\r\n        todos: nonCompletedItems,\r\n        pageIndex: newPageIndex,\r\n      });\r\n    };\r\n\r\n    case actionTypes.SET_AUTO_DELETE_COMPLETED: {\r\n      return Object.assign({}, state, {\r\n        autoDeleteCompleted: action.payload,\r\n      });\r\n    };\r\n\r\n    case actionTypes.SET_SHOW_COMPLETED: {\r\n      let newPageIndex = state.pageIndex;\r\n\r\n      // toggling visibility of todos may leave the user on an invalid page\r\n      if (!action.payload) {\r\n        // if were not showing completed todos ...\r\n        const todosCopy = [...state.todos];\r\n        const nonCompletedTodos = todosCopy.filter((item) => {\r\n          return !item.completed;\r\n        });\r\n\r\n        // ... recalculate the max page number and adjust the current page number if necessary\r\n        const newPageNumber = validatePageNumber(\r\n          state.pageIndex,\r\n          state.itemsPerPage,\r\n          nonCompletedTodos.length\r\n        );\r\n\r\n        newPageIndex = newPageNumber;\r\n      }\r\n\r\n      return Object.assign({}, state, {\r\n        showCompleted: action.payload,\r\n        pageIndex: newPageIndex,\r\n      });\r\n    };\r\n\r\n    //DEMO ACTIONS:\r\n    case actionTypes.LOAD_DEMO_ITEMS: {\r\n      return Object.assign({}, state, {\r\n        todos: DEMO_ITEMS,\r\n        todoId: DEMO_ITEMS.length,\r\n      });\r\n    };\r\n\r\n    default:\r\n      return state;\r\n\r\n  };\r\n};\r\n\r\nconst getTodoIndexById = (list, id) => {\r\n  for (let i = 0; i < list.length; i++) {\r\n    if (list[i].id === id) {\r\n      return i;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n};\r\n\r\n// check the page number is within bounds and if not return the closest valid page number\r\n// passed a 0-indexed page number\r\nconst validatePageNumber = (candidatePageNum, itemsPerPage, numTodos) => {\r\n  if (candidatePageNum < 0) {\r\n    return 0;\r\n  } else {\r\n    let maxPageIndex = Math.max(0, Math.ceil(numTodos / itemsPerPage) - 1);\r\n    if (candidatePageNum > maxPageIndex) return maxPageIndex;\r\n  }\r\n  return candidatePageNum;\r\n};\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './Reducers/reducer.js'\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}